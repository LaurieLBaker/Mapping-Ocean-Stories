---
title: "Wrangling and Visualizing Historical Texts"
subtitle: ""
author: "By Laurie Baker"
format:
  revealjs:
    footer: <https://coa-navigating-change.netlify.app>
    theme: [dark, fbcustom.scss]
    width: 1280
    height: 720
highlight-style: "arrow-light"
knitr:
  opts_chunk:
    echo: true
    collapse: true
    comment: "#>"
---

```{r}
#| include: false
#| file: setup.R
```

# Acknowledgements

<center>

<img src="figs/blue_jane.png" width="150px"/>

Slide Structure and Design inspired by Julia Silge 

[{{< fa brands github >}} \@juliasilge](https://github.com/juliasilge)

</center>

# What can you do with R? A snapshot

```{r packages for fish analysis, echo=FALSE, message=FALSE, warning=FALSE}
library(leaflet)
library(tidyverse)
library(lubridate)
library(sf)
```

```{r data for fish analysis, echo=FALSE, message=FALSE, warning=FALSE}

palangre87_97 <- read_csv("data-chile/palangre_87_97.csv")

```


## Influence of target species on fishing effort

```{r echo=FALSE, out.width="80%", fig.align="center", fig.alt = "Woman on boat holding a fish and a crab"}
knitr::include_graphics("figs/congrio_centolla.jpg")
```

## Who is fishing?

```{r echo=FALSE, out.width="80%", fig.align="center", fig.alt = "Plot showing the vessel length and width as boats on a scatter plot where the size of the boat is proportional to the carrying capacity of the vessel"}
knitr::include_graphics("figs/fishing_who.png")
```


## How are vessels fishing?

```{r echo=FALSE, out.width="80%", fig.align="center", fig.alt = "Plot showing the distribution of trip length by vessel"}
knitr::include_graphics("figs/fishing_when.png")
```



## What are vessels targeting?


```{r echo=FALSE, out.width="80%", fig.align="center", fig.alt = "Plot showing the distribution of species in the catch by weight by vessel"}
knitr::include_graphics("figs/fishing_what.png")
```


## Where are they fishing?


```{r location data prep 87 to 97, echo = FALSE}

palangre87_97 <- palangre87_97 %>%
  mutate(startlatdd = -latcalini/10000,
         startlondd = -loncalini/10000,
         group = as.factor(paste(CBU_ORAC, crucero, lance)),
         P_X6 = X6/Total.de.peso)

```


```{r chile-fishing-map, echo = FALSE}
pal <- colorNumeric(
  palette = "Oranges",
  domain = palangre87_97$P_X6)


palangre87_97$labels <- sprintf("<strong>Vessel Code: %s</strong><br/>%g proportion of catch", 
                  palangre87_97$CBU_ORAC, palangre87_97$P_X6) %>% lapply(htmltools::HTML)

(start_position_map <- leaflet(data = palangre87_97) %>%
   setView(lng = -0.352203, lat = -63.651992, zoom = 4) %>%
  addProviderTiles(providers$Esri.WorldImagery) %>%
  addCircleMarkers(data = palangre87_97[palangre87_97$CBU_ORAC == 400062,], 
                   lng = ~startlondd, 
                   lat = ~startlatdd, 
                   clusterOptions = NULL, 
                   color = ~pal(P_X6), 
                   label = palangre87_97[palangre87_97$CBU_ORAC == 400062,]$labels,
                   radius = 2,
                   group = "Vessel 400062") %>%
    addCircleMarkers(data = palangre87_97[palangre87_97$CBU_ORAC == 400065,], 
                   lng = ~startlondd, 
                   lat = ~startlatdd, 
                   clusterOptions = NULL, 
                   color = ~pal(P_X6), 
                   label = palangre87_97[palangre87_97$CBU_ORAC == 400065,]$labels,
                   radius = 2,
                   group = "Vessel 400065") %>%
    addCircleMarkers(data = palangre87_97[palangre87_97$CBU_ORAC == 400075,],
                   lng = ~startlondd,
                   lat = ~startlatdd,
                   clusterOptions = NULL,
                   color = ~pal(P_X6),
                   label = palangre87_97[palangre87_97$CBU_ORAC == 400075,]$labels,
                   radius = 2,
                   group = "Vessel 400075") %>%
    addCircleMarkers(data = palangre87_97[palangre87_97$CBU_ORAC == 400082,],
                   lng = ~startlondd,
                   lat = ~startlatdd,
                   clusterOptions = NULL,
                   color = ~pal(P_X6),
                   label = palangre87_97[palangre87_97$CBU_ORAC == 400082,]$labels,
                   radius = 2,
                   group = "Vessel 400082") %>%
    addCircleMarkers(data = palangre87_97[palangre87_97$CBU_ORAC == 400088,],
                   lng = ~startlondd,
                   lat = ~startlatdd,
                   clusterOptions = NULL,
                   color = ~pal(P_X6),
                   label = palangre87_97[palangre87_97$CBU_ORAC == 400088,]$labels,
                   radius = 2,
                   group = "Vessel 400088") %>%
    addCircleMarkers(data = palangre87_97[palangre87_97$CBU_ORAC == 400118,],
                   lng = ~startlondd,
                   lat = ~startlatdd,
                   clusterOptions = NULL,
                   color = ~pal(P_X6),
                   label = palangre87_97[palangre87_97$CBU_ORAC == 400118,]$labels,
                   radius = 2,
                   group = "Vessel 400118") %>%
    addCircleMarkers(data = palangre87_97[palangre87_97$CBU_ORAC == 400061,],
                   lng = ~startlondd,
                   lat = ~startlatdd,
                   clusterOptions = NULL,
                   color = ~pal(P_X6),
                   label = palangre87_97[palangre87_97$CBU_ORAC == 400061,]$labels,
                   radius = 2,
                   group = "Vessel 400061") %>%
    addCircleMarkers(data = palangre87_97[palangre87_97$CBU_ORAC == 400081,],
                   lng = ~startlondd,
                   lat = ~startlatdd,
                   clusterOptions = NULL,
                   color = ~pal(P_X6),
                   label = palangre87_97[palangre87_97$CBU_ORAC == 400081,]$labels,
                   radius = 2,
                   group = "Vessel 400081") %>%
    addCircleMarkers(data = palangre87_97[palangre87_97$CBU_ORAC == 400133,],
                   lng = ~startlondd,
                   lat = ~startlatdd,
                   clusterOptions = NULL,
                   color = ~pal(P_X6),
                   label = palangre87_97[palangre87_97$CBU_ORAC == 400133,]$labels,
                   radius = 2,
                   group = "Vessel 400133") %>%
    addCircleMarkers(data = palangre87_97[palangre87_97$CBU_ORAC == 400512,],
                   lng = ~startlondd,
                   lat = ~startlatdd,
                   clusterOptions = NULL,
                   color = ~pal(P_X6),
                   label = palangre87_97[palangre87_97$CBU_ORAC == 400512,]$labels,
                   radius = 2,
                   group = "Vessel 400512") %>%
    addLegend(position = "bottomright",
              pal = pal,
              values = ~P_X6,
              title = "Proportion of catch that is pink cusk-eel",
              opacity = 1)) %>%
    addLayersControl(
    overlayGroups = c("Vessel 400065", "Vessel 400062", "Vessel 400075",
                      "Vessel 400082", "Vessel 400088", "Vessel 400118",
                      "Vessel 400061", "Vessel 400081", "Vessel 400133",
                      "Vessel 400512"),
    options = layersControlOptions(collapsed = FALSE)
    )
```


# What else can R do?

## Create open source learning resources

<iframe src="https://andysouth.shinyapps.io/intro-to-spatial-r/" width="1016" height="516" frameBorder="0"></iframe>


## Code Mitten Patterns

<iframe src="https://laurielbaker.github.io/coded-mittens/selbu_mitten_generator.html" width="1016" height="516" frameBorder="0"></iframe>


## Choose colors for mitten patterns

<iframe src="https://laurie-the-student-baker.shinyapps.io/Coded-Mittens/" width="1016" height="516" frameBorder="0"></iframe>

## Monitor fish runs

<iframe src="https://laurie-the-student-baker.shinyapps.io/shad-river-herring/" width="1016" height="516" frameBorder="0"></iframe>


## Build websites!

<iframe src="https://coa-navigating-change.netlify.app" width="1016" height="516" frameBorder="0"></iframe>

##  Goals for this week {background-image="figs/lizzieskipping.gif" background-size="70%" background-color="white" background-position="bottom"}

* Get you coding and exploring text data. 
* Help you see ways you could use R in your projects.

# Data Science Life Cycle

## Data Science Life Cycle

```{r echo=FALSE, out.width="90%", fig.align="center"}
knitr::include_graphics("figs/data-science-cycle/data-science-cycle.001.png")
```

## Data Science Life Cycle 

```{r echo=FALSE, out.width="90%", fig.align="center"}
knitr::include_graphics("figs/data-science-cycle/data-science-cycle.002.png")
```

## Data Science Life Cycle

```{r echo=FALSE, out.width="90%", fig.align="center"}
knitr::include_graphics("figs/data-science-cycle/data-science-cycle.003.png")
```

## Data Science Life Cycle

```{r echo=FALSE, out.width="90%", fig.align="center"}
knitr::include_graphics("figs/data-science-cycle/data-science-cycle.004.png")
```

## Data Science Life Cycle

```{r echo=FALSE, out.width="90%", fig.align="center"}
knitr::include_graphics("figs/data-science-cycle/data-science-cycle.005.png")
```

## Data Science Life Cycle

```{r echo=FALSE, out.width="90%", fig.align="center"}
knitr::include_graphics("figs/data-science-cycle/data-science-cycle.006.png")
```

## Learning Objectives:

Learn how to

* Read in data using `read_excel`
* Select columns using `select`
* Create new variables using `mutate`
* Summarize and arrange data using `count` and `arrange`
* Group data to display and calculate multiple things 
* Correct entries using `mutate` and `case_when`
* Visualize and map changes in space and time using `ggplot` and `leaflet`

# Introducing Posit Cloud

##

```{r echo=FALSE, out.width="50%", fig.align="left"}
knitr::include_graphics("figs/excel.png")
```


##

```{r echo=FALSE, out.width="50%", fig.align="left"}
knitr::include_graphics("figs/r.png")
```


##

```{r echo=FALSE, out.width="73%", fig.align="left"}
knitr::include_graphics("figs/rstudio.png")
```

##

```{r echo=FALSE, out.width="50%", fig.align="left"}
knitr::include_graphics("figs/tour-r-rstudio.png")
```


## Let's install some packages {background-color="white"}

```{r}
#| eval: false
install.packages(c("tidyverse", # data wrangling
                   "lubridate", # dates
                   "readxl", # reading data
                   "DT")) # displaying data in tables
```

- **What are packages?** You can think of them like toolboxes with different sets of tools (i.e. *`functions`*) we can apply to our data 

##  The Journals (1870-1906) {background-image="figs/freeland_bunker_journal.jpg" background-size="45%" background-color="white"}

## 12 journals (1871-1883) transcribed


```{r}
library(readxl)
journal_1871_1872 <- read_excel("data/journal_1871_1872.xlsx")
journal_1873 <- read_excel("data/journal_1873.xlsx")
journal_1874 <- read_excel("data/journal_1874.xlsx")
journal_1875 <- read_excel("data/journal_1875.xlsx")
journal_1876 <- read_excel("data/journal_1876.xlsx")
journal_1877 <- read_excel("data/journal_1877.xlsx")
journal_1878 <- read_excel("data/journal_1878.xlsx")
journal_1879 <- read_excel("data/journal_1879.xlsx")
journal_1880 <- read_excel("data/journal_1880.xlsx")
journal_1881 <- read_excel("data/journal_1881.xlsx")
journal_1882 <- read_excel("data/journal_1882.xlsx")
journal_1883 <- read_excel("data/journal_1883.xlsx")

```

## Keeping Track

```{r echo = FALSE, message = FALSE, warning = FALSE}
journal_1871_1872$temperature_night <- as.numeric(journal_1871_1872$temperature_night)
journal_1873$temperature_night <- as.numeric(journal_1873$temperature_night)
journal_1874$temperature_night <- as.numeric(journal_1874$temperature_night)
journal_1875$temperature_night <- as.numeric(journal_1875$temperature_night)
journal_1876$temperature_night <- as.numeric(journal_1876$temperature_night)
journal_1877$temperature_night <- as.numeric(journal_1877$temperature_night)
journal_1878$temperature_night <- as.numeric(journal_1878$temperature_night)
journal_1879$temperature_night <- as.numeric(journal_1879$temperature_night)
journal_1880$temperature_night <- as.numeric(journal_1880$temperature_night)
journal_1881$temperature_night <- as.numeric(journal_1881$temperature_night)
journal_1882$temperature_night <- as.numeric(journal_1882$temperature_night)
journal_1883$temperature_night <- as.numeric(journal_1883$temperature_night)
```

```{r}
library(tidyverse)

journal_1871_1872$journal <- 1
journal_1873$journal <- 2
journal_1874$journal <- 3
journal_1875$journal <- 4
journal_1876$journal <- 5
journal_1877$journal <- 6
journal_1878$journal <- 7
journal_1879$journal <- 8
journal_1880$journal <- 9
journal_1881$journal <- 10
journal_1882$journal <- 11
journal_1883$journal <- 12

journals <- dplyr::bind_rows(journal_1871_1872, journal_1873, journal_1874, 
                             journal_1875, journal_1876, journal_1877, 
                             journal_1878, journal_1879, journal_1880, 
                             journal_1881, journal_1882, journal_1883)
```


## We have a lot of variables recorded!

```{r}
glimpse(journals)
```
## Exploring a subset using `select`


```{r}

(journals_sub <- journals %>%
    select(date_mdy, journal_entry, location))

```


## Creating new variables using `mutate`

```{r}
library(lubridate)
(journals_sub <- journals_sub %>%
    mutate(date_mdy = mdy(date_mdy),
           year = year(date_mdy),
           month = month(date_mdy)))
```

* The `lubridate` package contains useful functions for dates. 

## How often did Freeland write? 

```{r, echo=FALSE, warning=FALSE}

journals_sub %>%
    filter(is.na(year) == FALSE) %>%
    group_by(month, year) %>%
    summarize(days_written = n()) %>%
    ggplot(aes(x = month, y = days_written)) +
    geom_line() +
    geom_point() +
    facet_wrap(~year) +
    ylim(0, 36) +
    scale_x_continuous(breaks = c(0, 3, 6, 9, 12)) +
    labs(x = "Month", y = "Number of entries")
```


## Where did Freeland go? Step by Step

Start with the dataset

```{r}
#| code-line-numbers: "|1"
journals_sub 

```


## Where did Freeland go? Step by Step

And then `filter` for only known locations

```{r}
#| code-line-numbers: "|2"
journals_sub %>%
    filter(is.na(location) == FALSE, location != "NA")

```

* The function `filter` lets you filter rows based on their values. 

## Where did Freeland go? Step by Step

And then `separate_longer_delim` so each location is on its own row

```{r}
#| code-line-numbers: "|3"
journals_sub %>%
    filter(is.na(location) == FALSE, location != "NA") %>%
    separate_longer_delim(location, delim = ", ")

```

## Where did Freeland go? Step by Step

And then `count` the number of times he was at that location

```{r}
#| code-line-numbers: "|4"
journals_sub %>%
    filter(is.na(location) == FALSE, location != "NA") %>%
    separate_longer_delim(location, delim = ", ") %>%
    count(location)

```


## Where did Freeland go? Step by Step

And then `arrange` the locations in `desc`ending order from most to least visited.

```{r}
#| code-line-numbers: "|5"
journals_sub %>%
    filter(is.na(location) == FALSE, location != "NA") %>%
    separate_longer_delim(location, delim = ", ") %>%
    count(location) %>%
    arrange(desc(n))

```

## Where did Freeland go less? Step by Step

And then `arrange` the locations in ascending order from least to most visited.

```{r}
#| code-line-numbers: "|5"
journals_sub %>%
    filter(is.na(location) == FALSE, location != "NA") %>%
    separate_longer_delim(location, delim = ", ") %>%
    count(location) %>%
    arrange(n) 
```

## Plotting frequency of visits 

```{r}
(common_places <- journals_sub %>%
    filter(is.na(location) == FALSE, location != "NA") %>%
    separate_longer_delim(location, delim = ", ") %>%
    count(location) %>%
    slice_max(n, n = 15, with_ties = FALSE))
```

## Plotting frequency of visits

```{r}
 common_places %>%
    ggplot(aes(x = n, y = location)) +
    geom_col() +
    labs(x = "Number of mentions", y = "Location")
```

* Learn about `ggplot` in these [slides](https://laurielbaker.github.io/DSCA_data_visualisation_in_r/slides/index.html#1) and with these [interactive tutorials](https://posit.cloud/learn/primers/3)

## Plotting frequency of visits

```{r}
 common_places %>%
    ggplot(aes(x = n, y = fct_reorder(location, n))) +
    geom_col() +
    labs(x = "Number of mentions", y = "Location")
```

## Use `distinct` to detect mispellings and look at unique entries

```{r}
#| echo = FALSE

journals_sub <- journals_sub %>%
    mutate(location = case_when(location %in% c("Cranberry Isles") ~ "Cranberry Island",
                                TRUE ~ location))

```


```{r}
#| code-line-numbers: "|4"
journals_sub %>%
    separate_longer_delim(location, delim = ", ") %>%
    filter(str_detect(string = location, pattern = "Cranberry")) %>%
    distinct(location)
```


## Tidying words using `case_when`


```{r}
#| code-line-numbers: "|3,4"

journals_sub <- journals_sub %>%
    separate_rows(location, sep = ",") %>%
    mutate(location = case_when(location %in% c("Cranberry Isle", "Cranberry Island") ~ "Cranberry Isles",
                            TRUE ~ location)) 


journals_sub %>%
    filter(str_detect(string = location, pattern = "Cranberry")) %>%
    distinct(location)
```


## Why are places still coming up as different?

We can use `str_trim()` to get rid of white space. 

```{r}
#| code-line-numbers: "|2,3"

journals_sub <- journals_sub %>%
    mutate(location = str_trim(location, side = "both"))


journals_sub %>%
    filter(str_detect(string = location, pattern = "Cranberry")) %>%
    distinct(location)
```


---
## Your Turn: Fix Bass Harbor misspellings


```{r}
journals_sub %>%
    separate_longer_delim(location, delim = ", ") %>%
    filter(str_detect(string = location, pattern = "Bass|bass")) %>%
    distinct(location)
```

```{r, eval = FALSE}

journals_loc <- journals_loc %>%
    mutate(location = case_when(location %in% c(__________) ~ _______,
                            TRUE ~ location))

```

```{r, echo = FALSE}

journals_sub <- journals_sub %>%
    mutate(location = case_when(str_detect(location, "Bass|bass") == TRUE  ~ "Bass Harbor",
                            TRUE ~ location))

```

## Where did Freeland visit

```{r echo = FALSE}
journals_sub <- journals_sub %>%
    filter(is.na(location) == FALSE, location != "NA")

journals_sub %>%
    separate_longer_delim(location, delim = ", ") %>%
    count(location) %>%
    slice_max(n, n = 15) %>%
    ggplot(aes(x = n, y = fct_reorder(location, n))) +
    geom_col() +
    labs(x = "Number of mentions", y = "Location")
```

## How often did Freeland visit over time?

```{r echo = FALSE}
journals_loc_count <- journals_sub %>%
    filter(location %in% c("West Gouldsboro", "Ellsworth", "Rockland", "Bar Harbor", "Sullivan", "Calais", "Prospect Harbor", "East Sullivan", "Boston", "Bass Harbor", "Cranberry Isles")) %>%
    group_by(year) %>%
    count(location)

journals_loc_count %>%
    ggplot(aes(x = year, y = n, color = location)) +
    geom_line() +
    labs(x = "Year", y = "Number of mentions", color = "Location", title = "Number of times place visited each year by Freeland Bunker", subtitle = "Locations don't include home, shop, factor, and Winter Harbor")
```

## Use `group_by` to count yearly visits

```{r eval = TRUE}
(journals_loc_count <- journals_sub %>%
    filter(location %in% c("West Gouldsboro", "Ellsworth", "Rockland", "Bar Harbor", "Sullivan", "Calais", "Prospect Harbor", "East Sullivan", "Boston", "Bass Harbor", "Cranberry Isles")) %>%
    group_by(year) %>%
    count(location))

```

## Plot Code

```{r}
journals_loc_count %>%
    ggplot(aes(x = year, y = n, color = location)) +
    geom_line() +
    labs(x = "Year", 
         y = "Number of mentions", 
         color = "Location", 
         title = "Number of times place visited each year by Freeland Bunker", subtitle = "Locations don't include home, shop, factory, and Winter Harbor")
```



## Your Turn

Where did Freeland visit during your journal year? Fill in the blanks to find out. 

# Creating maps using `leaflet`

## We have location coordinates

```{r}
location_coordinates <- read_excel(path = "data/location_coordinates.xlsx")

location_coordinates <- location_coordinates %>%
    rename(location = location_list)

```

## We have a `count` of how often Freeland visited that location

```{r}
(loc_count <- journals_sub %>%
    count(location) %>%
    arrange(desc(n)))
```

## We can combine two data sets using a `join`

```{r}
(loc_df <- loc_count %>%
    left_join(location_coordinates, by = "location") %>%
    drop_na(latitude) %>%
    mutate(latitude = as.numeric(latitude),
           longitude = as.numeric(longitude))
           )
```

## Where did Freeland go?

```{r echo = FALSE}
library(leaflet)

leaflet(data = loc_df) %>%
     setView(lng = -66, lat = 43.5, zoom = 9) %>%
     addProviderTiles(providers$OpenStreetMap) %>%
     addCircleMarkers(lng = ~longitude, 
                      lat = ~latitude, 
                      label = ~location, 
                      radius = ~n/100)
```

## Where did Freeland go?

```{r eval = FALSE}
library(leaflet)

leaflet(data = loc_df) %>%
     setView(lng = -66, lat = 43.5, zoom = 9) %>%
     addProviderTiles(providers$OpenStreetMap) %>%
     addCircleMarkers(lng = ~longitude, 
                      lat = ~latitude, 
                      label = ~location, 
                      radius = ~n/100)
```

* Learn more `leaflet` in these [slides](https://laurielbaker.github.io/DSCA_leaflet_mapping_in_r/slides/leaflet_slides_COA.html#1) and these [tutorials](https://rstudio.github.io/leaflet/)

## Homework

- Double check a location's coordinates or
- Look up two locations and add 2 more sets of coordinates to the [location excel file](https://docs.google.com/spreadsheets/d/1vA5YjlsGHQBSmUOFsBpPSJhObK601zE3/edit?usp=sharing&ouid=104076949272458477636&rtpof=true&sd=true). Add your initials to the excel spreadsheet.
- Re-upload the location data


```{r echo=FALSE, out.width="30%", fig.align="left"}
knitr::include_graphics("figs/upload_data.png")
```


- Rerun the leaflet map to see the map expand

# Thanks! {background-image="figs/p_and_p_cover.png" background-size="cover" background-opacity="0.5"}

<center>

<img src="figs/freeland_headshot.jpg" width="150px"/>

[{{< fa brands github >}} \@LaurieLBaker](https://github.com/laurielbaker)

[{{< fa link >}} lauriebaker@rbind.io](https://lauriebaker.rbind.io)

</center>

::: footer
Slides created with [Quarto](https://quarto.org/)
:::
